<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>common-dependencies</artifactId>
        <groupId>com.wk</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>common-base-dependency</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-core</artifactId>
            <version>5.8.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>compile</scope>
            <version>${lombok.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-api.version}</version>
        </dependency>

        <!-- 热部署使用的依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    </dependencies>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                    <configuration>
                        <encoding>UTF-8</encoding>
                        <nonFilteredFileExtensions>
                            <!--                            <nonFilteredFileExtension></nonFilteredFileExtension>-->
                        </nonFilteredFileExtensions>
                    </configuration>
                </plugin>

                <!--  源码发布  -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                    <configuration>
                        <attach>true</attach>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>deploy</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- 子项目版本控制 -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${versions-maven-plugin.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>${maven-release-plugin.version}</version>
                    <configuration>
                        <allowReleasePluginSnapshot>true</allowReleasePluginSnapshot>
                        <useReleaseProfile>true</useReleaseProfile>
                        <tagNameFormat>@{project.version}</tagNameFormat>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot-maven-plugin.version}</version>
                    <configuration>
                        <layout>ZIP</layout>
                        <attach>false</attach>
                        <mainClass>${mainClass}</mainClass>
                    </configuration>
                    <executions>
                        <execution>
                            <id>compile</id>
                            <phase>compile</phase>
                            <goals>
                                <goal>build-info</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>package</id>
                            <phase>package</phase>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>1.2.2</version>
                    <executions>
                        <execution>
                            <phase>install</phase>
                            <goals>
                                <goal>build</goal>
                                <goal>push</goal>
                            </goals>
                            <configuration>
                                <skipDockerBuild>${docker.skipDockerBuild}</skipDockerBuild>
                                <skipDockerPush>${docker.skipDockerPush}</skipDockerPush>
                                <imageName>
                                    ${dockerNexusServer}:${dockerNexusServerPort}/${project.build.finalName}:${project.version}
                                </imageName>
                                <imageTags>
                                    <imageTag>latest</imageTag>
                                    <imageTag>${project.version}</imageTag>
                                </imageTags>
                                <registryUrl>http://${dockerNexusServer}:${dockerNexusServerPort}</registryUrl>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <baseImage>${dockerNexusServer}:${dockerNexusServerPort}/jre:8</baseImage>
                        <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                        <env>
                        </env>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                        <forceTags>true</forceTags>
                        <serverId>${dockerNexusServer}:${dockerNexusServerPort}</serverId>
                    </configuration>
                </plugin>
                <!--
                mvn compile jib:buildTar
                将镜像生成tar文件，保存在项目的target目录下
                在任何docker环境执行
                 docker load \-\-input xxx.tar即可导入到本地镜像仓库

                mvn compile jib:dockerBuild
                将镜像存入当前镜像仓库，该仓库是当前docker客户端可以连接的docker daemon，一般是指本地镜像仓库

                mvn compile jib:build
                将镜像推送到远程仓库，仓库位置与镜像名字的前缀有关，一般是hub.docker.com或者阿里云镜像仓库，使用该参数时需要提前登录成功
                -->
                <!-- 使用jib插件直接将应用打包为一个Docker镜像 mvn compile jib:dockerBuild -->
                <plugin>
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>3.0.0</version>
                    <configuration>
                        <!-- 由于直接mvn install会报错,需要传入参数-DsendCredentialsOverHttp=true -->
                        <skip>${jib.skip}</skip>
                        <!--                        <containerizingMode>packaged</containerizingMode>-->
                        <from>
                            <!-- 基于自定义的jre镜像 -->
                            <image>${dockerNexusServer}:${dockerNexusServerPort}/jre:8</image>
                        </from>
                        <to>
                            <tags>
                                <!--tag即镜像的版本，一般是覆盖latest并且新增一个当前版本号-->
                                <tag>latest</tag>
                                <tag>${project.version}</tag>
                            </tags>
                            <image>
                                ${dockerNexusServer}:${dockerNexusServerPort}/${project.build.finalName}
                            </image>
                        </to>
                        <!--container节点用来设置容器的属性，例如对外暴露的端口、jvm参数等-->
                        <container>
                            <!--jvm启动参数-->
                            <jvmFlags>
                                <jvmFlag>-Xms512m</jvmFlag>
                                <jvmFlag>-Xmx512m</jvmFlag>
                                <jvmFlag>-Djava.awt.headless=true</jvmFlag>
                                <jvmFlag>-Duser.timezone=GMT+08</jvmFlag>  <!-- 设置时区 -->
                                <jvmFlag>-Dfile.encoding=UTF8</jvmFlag>
                                <jvmFlag>-DsendCredentialsOverHttp=true</jvmFlag>
                            </jvmFlags>
                            <!--要暴露的端口-->
                            <ports>
                                <port>3004</port>
                            </ports>
                            <!--使用该参数将镜像的创建时间与系统时间一致-->
                            <!--<useCurrentTimestamp>true</useCurrentTimestamp>-->
                            <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
                            <mainClass>${mainClass}</mainClass>
                            <!-- 设置时区  -->
                            <environment>
                                <TZ>Asia/Shanghai</TZ>
                            </environment>
                        </container>
                        <allowInsecureRegistries>true</allowInsecureRegistries>
                    </configuration>
                    <!-- 把 jib 绑定到 Maven 命令中-->
                    <executions>
                        <execution>
                            <phase>install</phase><!-- 表示执行mvn install命令的时候就会自动构建镜像了-->
                            <goals>
                                <goal>build</goal><!-- 表示执行的jib命令-->
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--                <plugin>-->
                <!--                    <groupId>com.wk</groupId>-->
                <!--                    <artifactId>dockercompose-maven-plugin</artifactId>-->
                <!--                    <version>1.0.0-SNAPSHOT</version>-->
                <!--                    <executions>-->
                <!--                        <execution>-->
                <!--                            <phase>package</phase>-->
                <!--                            <goals>-->
                <!--                                <goal>generate</goal>-->
                <!--                            </goals>-->
                <!--                            <configuration>-->
                <!--                                <applicationGroup>framework</applicationGroup>-->
                <!--                                <dockerNexusServer>${dockerNexusServer}</dockerNexusServer>-->
                <!--                                <dockerNexusServerPort>${dockerNexusServerPort}</dockerNexusServerPort>-->
                <!--                            </configuration>-->
                <!--                        </execution>-->
                <!--                    </executions>-->
                <!--                </plugin>-->

                <plugin>
                    <groupId>org.mybatis.generator</groupId>
                    <artifactId>mybatis-generator-maven-plugin</artifactId>
                    <version>1.4.0</version>
                    <configuration>
                        <!--配置文件的位置-->
                        <configurationFile>src/main/resources/mybatis-generator-config.xml</configurationFile>
                        <verbose>true</verbose>
                        <overwrite>true</overwrite>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>mysql</groupId>
                            <artifactId>mysql-connector-java</artifactId>
                            <version>8.0.28</version>
                        </dependency>
                        <!--生成代码插件-->
                        <dependency>
                            <groupId>org.mybatis.generator</groupId>
                            <artifactId>mybatis-generator-core</artifactId>
                            <version>1.4.0</version>
                        </dependency>
                    </dependencies>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-maven-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions-maven-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${maven-release-plugin.version}</version>
            </plugin>
        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

    </build>

    <repositories>
        <repository>
            <id>central</id>
            <name>central</name>
            <url>http://wk-server:1000/repository/maven-central/</url>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </snapshots>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </releases>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </releases>
            <id>central</id>
            <name>central</name>
            <url>http://wk-server:1000/repository/maven-central/</url>
        </pluginRepository>
    </pluginRepositories>
    <distributionManagement>
        <repository>
            <id>releases</id>
            <name>releases</name>
            <url>http://wk-server:1000/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>snapshots</id>
            <name>snapshots</name>
            <url>http://wk-server:1000/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <profiles>
        <profile>
            <!--不同环境Profile的唯一id-->
            <id>dev</id>
            <properties>
                <docker.skipDockerBuild>true</docker.skipDockerBuild>
                <docker.skipDockerPush>true</docker.skipDockerPush>
                <jib.skip>true</jib.skip>
            </properties>

            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

        </profile>
        <profile>
            <id>test</id>
            <properties>
                <docker.skipDockerBuild>false</docker.skipDockerBuild>
                <docker.skipDockerPush>false</docker.skipDockerPush>
                <jib.skip>false</jib.skip>
            </properties>
        </profile>
    </profiles>

</project>